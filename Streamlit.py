import streamlit as st
import numpy as np
import pandas as pd
from datetime import datetime, date
import shap
import lightgbm as lgb
import matplotlib.pyplot as plt

# Load m√¥ h√¨nh LightGBM
model = lgb.Booster(model_file='final_model.txt')

# ---------------------- H√†m x·ª≠ l√Ω ----------------------
def encode_education(level):
    mapping = {
        "Trung h·ªçc c∆° s·ªü": 0,
        "Trung h·ªçc ph·ªï th√¥ng / Trung c·∫•p": 1,
        "ƒê·∫°i h·ªçc ch∆∞a ho√†n th√†nh": 2,
        "ƒê·∫°i h·ªçc": 3,
        "Sau ƒë·∫°i h·ªçc": 4
    }
    return mapping.get(level, np.nan)

def encode_gender(gender):
    return 0 if gender == "N·ªØ" else 1 if gender == "Nam" else np.nan

def encode_days_employed(days):
    return days if days != 365243 else np.nan

def compute_debt_credit_ratio(debt, credit_sum):
    return debt / credit_sum if credit_sum != 0 else 0

def compute_days_birth(birth_date):
    return (birth_date - datetime.today().date()).days


def compute_age_exact(birth_date):  # change
    today = datetime.today().date()

    # S·ªë nƒÉm ƒë·∫ßy ƒë·ªß
    years = today.year - birth_date.year

    # N·∫øu ch∆∞a ƒë·∫øn sinh nh·∫≠t nƒÉm nay th√¨ tr·ª´ 1 nƒÉm
    if (today.month, today.day) < (birth_date.month, birth_date.day):
        years -= 1

    # T√≠nh s·ªë ng√†y t·ª´ sinh nh·∫≠t nƒÉm nay ƒë·∫øn h√¥m nay
    last_birthday = birth_date.replace(year=today.year)
    if last_birthday > today:
        last_birthday = last_birthday.replace(year=today.year - 1)

    days_since_birthday = (today - last_birthday).days
    # T√≠nh t·ªïng ng√†y trong nƒÉm (nƒÉm hi·ªán t·∫°i)
    next_birthday = last_birthday.replace(year=last_birthday.year + 1)
    days_in_year = (next_birthday - last_birthday).days

    # Tu·ªïi ch√≠nh x√°c c√≥ ph·∫ßn th·∫≠p ph√¢n
    age = years + days_since_birthday / days_in_year

    return round(age, 1)
def calculate_days_id_publish(change_date_str, application_date_str):
    change_date = datetime.strptime(change_date_str, '%Y-%m-%d')
    application_date = datetime.strptime(application_date_str, '%Y-%m-%d')
    return (application_date - change_date).days * -1

def calculate_days_credit(application_date):
    return (application_date - datetime.today().date()).days

def calculate_days_credit_enddate_max(credit_durations):
    return max(credit_durations) * -1 if credit_durations else np.nan

def map_income_type(income_type):
    mapping = {
        'L√†m c√¥ng ƒÉn l∆∞∆°ng': '0', 'Th·∫•t nghi·ªáp': '1', 'Sinh vi√™n': '2',
        'C√¥ng ch·ª©c nh√† n∆∞·ªõc': '3', 'Ng∆∞·ªùi ngh·ªâ h∆∞u': '4', 'Ngh·ªâ thai s·∫£n': '5',
        'ƒê·ªëi t√°c kinh doanh': '6', 'Ch·ªß doanh nghi·ªáp': '7'
    }
    return float(mapping.get(income_type, np.nan))

def convert_document_3(value):
    return 1 if value == 'C√≥' else 0

def convert_car_ownership(value):
    return 1 if value == 'C√≥' else 0

def calculate_max_utilization(df):
    # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c·ªôt "Ng√†y tr·∫£ theo l·ªãch"
    if "Ng√†y tr·∫£ theo l·ªãch" not in df.columns:
        st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt 'Ng√†y tr·∫£ theo l·ªãch' trong d·ªØ li·ªáu.")
        return 0

    # ƒê·∫£m b·∫£o c√°c gi√° tr·ªã l√† ki·ªÉu datetime
    df["Ng√†y tr·∫£ theo l·ªãch"] = pd.to_datetime(df["Ng√†y tr·∫£ theo l·ªãch"], errors='coerce')

    # T·∫°o c·ªôt 'Month'
    df['Month'] = df['Ng√†y tr·∫£ theo l·ªãch'].apply(lambda x: x.strftime('%Y-%m') if pd.notnull(x) else None)

    # L·ªçc kho·∫£n vay th·∫ª
    cc_df = df[df['Kho·∫£n vay th·∫ª?']]

    if cc_df.empty:
        return 0

    # T√≠nh to√°n t·ª∑ l·ªá s·ª≠ d·ª•ng h·∫°n m·ª©c
    cc_df['Utilization_Ratio'] = cc_df['D∆∞ n·ª£'] / cc_df['H·∫°n m·ª©c ƒë∆∞·ª£c c·∫•p']
    avg_utilization_per_month = cc_df.groupby('Month')['Utilization_Ratio'].mean()
    max_avg_utilization_3m = avg_utilization_per_month.tail(3).max()

    return max_avg_utilization_3m

def calculate_street_loan_count(df):
    return df[df['K√™nh'] == 'T·∫°i qu·∫ßy'].shape[0]

def score_scaling(p):
    pdo = 50
    base_score = 500

    factor = pdo / np.log(2)
    offset = base_score - (factor * np.log(50))
    score = offset + factor * np.log((1 - p) / p)
    return score

def suggest_credit_limit(score, age, gender, education, avg_limit_3m, utilization_rate, #change
                         low, med, high, cap):
    """
    H√†m ƒë·ªÅ xu·∫•t h·∫°n m·ª©c vay d·ª±a tr√™n nhi·ªÅu y·∫øu t·ªë ƒë·∫ßu v√†o.

    Tham s·ªë:
        - score: ƒëi·ªÉm t√≠n d·ª•ng
        - age: tu·ªïi
        - gender: 'Nam' ho·∫∑c 'N·ªØ'
        - education: tr√¨nh ƒë·ªô h·ªçc v·∫•n (string)
        - avg_limit_3m: h·∫°n m·ª©c b√¨nh qu√¢n 3 th√°ng g·∫ßn nh·∫•t
        - utilization_rate: t·ª∑ l·ªá s·ª≠ d·ª•ng h·∫°n m·ª©c hi·ªán t·∫°i (0‚Äì1)
        - low, med, high: c√°c ng∆∞·ª°ng ƒëi·ªÉm t√≠n d·ª•ng ph√¢n lo·∫°i
        - cap: gi√° tr·ªã tr·∫ßn h·∫°n m·ª©c cho ph√©p

    Tr·∫£ v·ªÅ:
        - h·∫°n m·ª©c ƒë·ªÅ xu·∫•t (l√†m tr√≤n ƒë·∫øn h√†ng ch·ª•c ng√†n)
    """

    # 1. H·ªá s·ªë theo ƒëi·ªÉm t√≠n d·ª•ng
    if score <= low:
        score_factor = 0
    elif score <= med:
        score_factor = 0.75
    elif score <= high:
        score_factor = 1.5
    else:
        score_factor = 2

    # 2. H·ªá s·ªë theo tu·ªïi
    if age < 25:
        age_factor = 0.8
    elif age <= 35:
        age_factor = 1.0
    else:
        age_factor = 1.2

    # 3. H·ªá s·ªë gi·ªõi t√≠nh
    if gender.lower() == 'N·ªØ':
        gender_factor = 1.0
    elif gender.lower() == 'Ch·ªçn':
        gender_factor = 0.5
    else:
        gender_factor = 0.95


    # 4. H·ªá s·ªë h·ªçc v·∫•n
    edu_factors = {
        "Trung h·ªçc c∆° s·ªü": 0.7,
        "Trung h·ªçc ph·ªï th√¥ng / Trung c·∫•p": 0.85,
        "ƒê·∫°i h·ªçc ch∆∞a ho√†n th√†nh": 0.95,
        "ƒê·∫°i h·ªçc": 1.0,
        "Sau ƒë·∫°i h·ªçc": 1.2
    }
    edu_factor = edu_factors.get(education, 1.0)

    # 5. H·ªá s·ªë t·ª∑ l·ªá s·ª≠ d·ª•ng h·∫°n m·ª©c
    if utilization_rate > 0.9:
        utilization_factor = 0.6
    elif utilization_rate > 0.6:
        utilization_factor = 0.8
    elif utilization_rate > 0.3:
        utilization_factor = 1.0
    else:
        utilization_factor = 1.2

    # T·ªïng h·ªá s·ªë nh√¢n
    total_factor = (score_factor *
                    age_factor *
                    gender_factor *
                    edu_factor *
                    utilization_factor)

    # H·∫°n m·ª©c ƒë·ªÅ xu·∫•t, gi·ªõi h·∫°n b·ªüi cap
    suggested_limit = min(avg_limit_3m * total_factor, cap)

    return round(suggested_limit, -4)  # L√†m tr√≤n theo h√†ng ch·ª•c ng√†n

# ---------------------- Giao di·ªán ng∆∞·ªùi d√πng ----------------------
st.set_page_config(page_title="Credit Scoring App", layout="wide")
st.title("üí≥ ·ª®ng d·ª•ng ch·∫•m ƒëi·ªÉm t√≠n d·ª•ng kh√°ch h√†ng")

#page_bg_img = '''
#<style>
#.stApp {
#background-image: url("https://images.unsplash.com/photo-1542281286-9e0a16bb7366");
#background-size: cover;
#background-repeat: no-repeat;
#background-attachment: fixed;
#}
#</style>
#'''

# Ch√®n CSS v√†o app
#st.markdown(page_bg_img, unsafe_allow_html=True)

# 1. Th√¥ng tin c√° nh√¢n
with st.expander("üë§ Th√¥ng tin c√° nh√¢n"):
    col1, col2 = st.columns([1, 1])
    with col1:
        Name = st.text_input("H·ªç t√™n KH:")
        gender = st.selectbox("Gi·ªõi t√≠nh", options=["Ch·ªçn", "N·ªØ", "Nam"], index=0)
        change_date = st.date_input("Ng√†y c·∫•p CMND", min_value=date(1980, 1, 1),max_value=date(2025, 12, 31),value=date.today())
        employment_status = st.selectbox("T√¨nh tr·∫°ng vi·ªác l√†m", ["ƒêang l√†m vi·ªác", "Th·∫•t nghi·ªáp", "Ngh·ªâ h∆∞u", "Kh√°c"],
                                         key="employment_status")
        if employment_status == "ƒêang l√†m vi·ªác":
            years_worked = st.number_input("S·ªë nƒÉm l√†m vi·ªác", min_value=0, max_value=100, step=1, key="years_worked")
            days_employed = years_worked * 365
        else:
            days_employed = 1

    with col2:
        cmnd = st.text_input("S·ªë CMND/CCCD")
        birth_date = st.date_input("Ng√†y sinh", min_value=date(1960, 1, 1), max_value=date(2010, 12, 31))
        education = st.selectbox("Tr√¨nh ƒë·ªô h·ªçc v·∫•n",
                                 options=["Ch·ªçn", "Trung h·ªçc c∆° s·ªü", "Trung h·ªçc ph·ªï th√¥ng / Trung c·∫•p", "ƒê·∫°i h·ªçc",
                                          "ƒê·∫°i h·ªçc ch∆∞a ho√†n th√†nh", "Sau ƒë·∫°i h·ªçc"])
        income_type = st.selectbox("Lo·∫°i thu nh·∫≠p",
                                   ['Ch·ªçn', 'L√†m c√¥ng ƒÉn l∆∞∆°ng', 'Th·∫•t nghi·ªáp', 'Sinh vi√™n', 'C√¥ng ch·ª©c nh√† n∆∞·ªõc',
                                    'Ng∆∞·ªùi ngh·ªâ h∆∞u', 'Ngh·ªâ thai s·∫£n', 'ƒê·ªëi t√°c kinh doanh', 'Ch·ªß doanh nghi·ªáp'])

    st.markdown("---")

    col3, col4 = st.columns([1, 1])
    with col3:
        application_date = st.date_input("Ng√†y n·ªôp ƒë∆°n vay",min_value=date(2025, 1, 1),max_value=date(2025, 12, 31),value=date.today())
    with col4:
        credit_application_date = st.date_input("Ng√†y m·ªü kho·∫£n vay ƒë·∫ßu ti√™n (·ªü t·∫•t c·∫£ TCTD)",min_value=date(1980, 1, 1),max_value=date(2025, 12, 31),value=date.today())

# 5. Gi·∫•y t·ªù b·ªï sung
with st.expander("üìé H·ªì s∆° kho·∫£n vay"):
    checklist_options = [
        "ƒêƒÉng k√Ω k·∫øt h√¥n",
        "S·ªï h·ªô kh·∫©u / Gi·∫•y t·∫°m tr√∫",
        "Gi·∫•y x√°c nh·∫≠n t√¨nh tr·∫°ng h√¥n nh√¢n",
        "ƒêƒÉng k√Ω xe √¥ t√¥ / Gi·∫•y t·ªù xe",
        "Gi·∫•y ch·ª©ng nh·∫≠n quy·ªÅn s·ª≠ d·ª•ng ƒë·∫•t (S·ªï ƒë·ªè/s·ªï h·ªìng)",
        "H·ª£p ƒë·ªìng lao ƒë·ªông",
        "Sao k√™ l∆∞∆°ng 3 th√°ng g·∫ßn nh·∫•t",
        "Gi·∫•y ƒëƒÉng k√Ω kinh doanh",
        "B√°o c√°o thu·∫ø/Doanh thu",
        "H·ª£p ƒë·ªìng cho thu√™ t√†i s·∫£n",
        "Gi·∫•y t·ªù s·ªü h·ªØu t√†i s·∫£n cho thu√™",
        "H·ª£p ƒë·ªìng mua b√°n nh√†/xe",
        "D·ª± to√°n chi ph√≠ x√¢y d·ª±ng/s·ª≠a nh√†",
        "H√≥a ƒë∆°n h·ªçc ph√≠ / h·ª£p ƒë·ªìng du h·ªçc",
        "S·ªï ti·∫øt ki·ªám / t√†i s·∫£n ƒë·∫£m b·∫£o kh√°c",
        "·∫¢nh ch·ª•p t√†i s·∫£n ƒë·∫£m b·∫£o",
        "H·ª£p ƒë·ªìng t√≠n d·ª•ng c≈© (n·∫øu c√≥)",
        "Gi·∫•y x√°c nh·∫≠n thu nh·∫≠p b·ªï sung",
        "H·ª£p ƒë·ªìng th·∫ø ch·∫•p t√†i s·∫£n",
        "Kh√°c (t√†i li·ªáu b·ªï sung)"
    ]

    # Chia th√†nh 2 h√†ng
    half = len(checklist_options) // 2
    row1 = checklist_options[:half]
    row2 = checklist_options[half:]

    document_flags = {}
    uploaded_files = {}

    def render_row(docs):
        cols = st.columns(2)
        for idx, doc in enumerate(docs):
            with cols[idx % 2]:
                checked = st.checkbox(doc, key=f"check_{doc}")
                document_flags[doc] = int(checked)

                if checked:
                    uploaded_file = st.file_uploader(
                        f"T·∫£i l√™n file cho: {doc}",
                        key=f"upload_{doc}",
                        type=["pdf", "jpg", "png", "jpeg", "docx"]
                    )
                    uploaded_files[doc] = uploaded_file
                else:
                    uploaded_files[doc] = None

    #st.markdown("### üìÑ H√†ng 1:")
    render_row(row1)

    #st.markdown("### üìÑ H√†ng 2:")
    render_row(row2)

    # V√≠ d·ª• flag
    flag_document_3 = document_flags.get("S·ªï h·ªô kh·∫©u / Gi·∫•y t·∫°m tr√∫", 0)
    flag_own_car = document_flags.get("ƒêƒÉng k√Ω xe √¥ t√¥ / Gi·∫•y t·ªù xe", 0)

# 3. Th√¥ng tin t√≠n d·ª•ng
with st.expander("üí∞ Th√¥ng tin t√≠n d·ª•ng"):
    col1, col2 = st.columns([2, 2])
    with col1:
        external_1 = st.number_input("ƒêi·ªÉm XHTD KH t·∫°i CIC", min_value=0.0, format="%.5f")
    with col2:
        external_2 = st.number_input("ƒêi·ªÉm XHTD KH t·∫°i PCB", min_value=0.0, format="%.5f")

    col3, col4 = st.columns([2, 2])
    with col3:
        external_3 = st.number_input("ƒêi·ªÉm XHTD KH t·∫°i Viettel", min_value=0.0, format="%.5f")
    with col4:
        amt_credit = st.number_input("H·∫°n m·ª©c vay hi·ªán t·∫°i (tri·ªáu VNƒê)", min_value=0.0, step=0.1)

    col5, col6 = st.columns([2, 2])
    with col5:
        amt_annuity = st.number_input("Kho·∫£n tr·∫£ g√≥p h√†ng th√°ng (tri·ªáu VNƒê)", min_value=0.0, step=0.1)
    with col6:
        amt_debt = st.number_input("T·ªïng d∆∞ n·ª£ hi·ªán t·∫°i (tri·ªáu VNƒê)", min_value=0.0, step=0.1)
    col7, col8 = st.columns([2, 2])
    with col7:
        amt_credit_sum = st.number_input("T·ªïng h·∫°n m·ª©c t√≠n d·ª•ng ƒë∆∞·ª£c c·∫•p (tri·ªáu VNƒê)", min_value=0.0, step=0.1)
    with col8:
        DPD = st.selectbox("Kh√°ch h√†ng c√≥ ƒëang qu√° h·∫°n kh√¥ng?", ["C√≥", "Kh√¥ng"], key="DPD")


# 4. L·ªãch s·ª≠ t√≠n d·ª•ng (danh s√°ch kho·∫£n vay)
#st.markdown("### üóì L·ªãch s·ª≠ t√≠n d·ª•ng (c√°c kho·∫£n vay c√≤n hi·ªáu l·ª±c)")
# 4. L·ªãch s·ª≠ t√≠n d·ª•ng (danh s√°ch kho·∫£n vay)
with st.expander("üìÑ Th√¥ng tin c√°c kho·∫£n vay"):
    if "loan_entries" not in st.session_state:
        st.session_state.loan_entries = []

    # T·∫°o c√°c c·ªôt cho t·∫•t c·∫£ c√°c input trong m·ªôt h√†ng
    col1, col2, col3, col4, col5, col6, col7, col8, col9, col10 = st.columns([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])

    with col1:
        new_loan_id = st.text_input("üîπ M√£ kho·∫£n vay", key="loan_id")
    with col2:
        new_days_remaining = st.number_input("üî∏ S·ªë ng√†y c√≤n l·∫°i", min_value=1, max_value=5000, step=1, key="days_remaining")
    with col3:
        new_limit = st.number_input("H·∫°n m·ª©c ƒë∆∞·ª£c c·∫•p", min_value=0, step=1000000, format="%d", key="limit")
    with col4:
        new_outstanding = st.number_input("D∆∞ n·ª£", min_value=0, step=1000000, format="%d", key="outstanding")
    with col5:
        new_last_payment_date = st.date_input("Ng√†y tr·∫£ g·∫ßn nh·∫•t", key="last_payment_date", min_value=date(1980, 1, 1), max_value=date(2025, 12, 31), value=date.today())
    with col6:
        new_scheduled_payment_date = st.date_input("Ng√†y tr·∫£ theo l·ªãch", key="scheduled_payment_date", min_value=date(1980, 1, 1), max_value=date(2025, 12, 31), value=date.today())
    with col7:
        new_channel = st.selectbox("K√™nh", ["Ch·ªçn", "Online", "T·∫°i qu·∫ßy"], key="channel")
    with col8:
        new_is_installment = st.checkbox("Tr·∫£ g√≥p", key="is_installment")
    with col9:
        new_is_cc = st.checkbox("Kho·∫£n vay th·∫ª?", key="is_cc")
    with col10:
        new_is_closed = st.checkbox("ƒê√£ ƒë√≥ng kho·∫£n vay ch∆∞a?", key="is_closed")

    # Ki·ªÉm tra v√† kh·ªüi t·∫°o loan_entries n·∫øu ch∆∞a c√≥
    if "loan_entries" not in st.session_state:
        st.session_state.loan_entries = []

    # ƒê·ªãnh nghƒ©a DataFrame m·∫∑c ƒë·ªãnh
    default_data = {
        "M√£ kho·∫£n vay": ["N/A"],
        "S·ªë ng√†y c√≤n l·∫°i": [0],
        "Tr·∫£ g√≥p": [False],
        "H·∫°n m·ª©c ƒë∆∞·ª£c c·∫•p": [0],
        "D∆∞ n·ª£": [0],
        "Ng√†y tr·∫£ g·∫ßn nh·∫•t": [pd.NaT],
        "Ng√†y tr·∫£ theo l·ªãch": [pd.NaT],
        "K√™nh": ["Kh√¥ng c√≥"],
        "Kho·∫£n vay th·∫ª?": [False],
        "ƒê√£ ƒë√≥ng kho·∫£n vay ch∆∞a?": [False]
    }
    default_df = pd.DataFrame(default_data)

    # N√∫t th√™m kho·∫£n vay
    if st.button("‚ûï Th√™m kho·∫£n vay"):
        if new_loan_id:
            new_entry = {
                "M√£ kho·∫£n vay": new_loan_id,
                "S·ªë ng√†y c√≤n l·∫°i": new_days_remaining,
                "Tr·∫£ g√≥p": new_is_installment,
                "H·∫°n m·ª©c ƒë∆∞·ª£c c·∫•p": new_limit,
                "D∆∞ n·ª£": new_outstanding,
                "Ng√†y tr·∫£ g·∫ßn nh·∫•t": new_last_payment_date,
                "Ng√†y tr·∫£ theo l·ªãch": new_scheduled_payment_date,
                "K√™nh": new_channel,
                "Kho·∫£n vay th·∫ª?": new_is_cc,
                "ƒê√£ ƒë√≥ng kho·∫£n vay ch∆∞a?": new_is_closed
            }

            # Th√™m d·ªØ li·ªáu v√†o session_state
            st.session_state.loan_entries.append(new_entry)
            #st.success("ƒê√£ th√™m kho·∫£n vay th√†nh c√¥ng!")
        else:
            st.warning("Vui l√≤ng ƒëi·ªÅn ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (M√£ kho·∫£n vay v√† K√™nh).")

        # Hi·ªÉn th·ªã DataFrame ƒë√£ chu·∫©n h√≥a
        if st.session_state.loan_entries:
            st.dataframe(pd.DataFrame(st.session_state.loan_entries))


# 6. Submit & x·ª≠ l√Ω m√¥ h√¨nh
submit = st.button("üöÄ Ch·∫•m ƒëi·ªÉm t√≠n d·ª•ng")
if submit:
    errors = []

    # Ki·ªÉm tra c√°c selectbox b·∫Øt bu·ªôc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ "Ch·ªçn"
    if gender == "Ch·ªçn":
        errors.append("Vui l√≤ng ch·ªçn gi·ªõi t√≠nh.")
    if education == "Ch·ªçn":
        errors.append("Vui l√≤ng ch·ªçn tr√¨nh ƒë·ªô h·ªçc v·∫•n.")
    if income_type == "Ch·ªçn":
        errors.append("Vui l√≤ng ch·ªçn lo·∫°i thu nh·∫≠p.")
    else:
        if st.session_state.loan_entries:
            df = pd.DataFrame(st.session_state.loan_entries)
            #st.write("DataFrame hi·ªán t·∫°i:", df)
        else:
            st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu kho·∫£n vay.")
        credit_durations = [entry["S·ªë ng√†y c√≤n l·∫°i"] for entry in st.session_state.loan_entries]

        features = {
            'AVG_EXT_SOURCE': np.mean([external_1, external_2, external_3]),
            'EXT_SOURCE_1': external_1,
            'EXT_SOURCE_2': external_2,
            'EXT_SOURCE_3': external_3,
            'TERM': round((amt_credit * 1e6) / (amt_annuity * 1e6)) if amt_annuity else np.nan,
            'DAYS_BIRTH': compute_days_birth(birth_date),
            'DEBT_CREDIT_RATIO': compute_debt_credit_ratio(amt_debt, amt_credit_sum),
            'CODE_GENDER': encode_gender(gender) if gender != "Ch·ªçn" else np.nan,
            'NAME_EDUCATION_TYPE': encode_education(education if education != "Ch·ªçn" else None),
            'DAYS_EMPLOYED': encode_days_employed(days_employed),
            'MAX_AMT_BALANCE_AMT_CREDIT_LIMIT_ACTUAL_meanonid_L3M': calculate_max_utilization(df),
            'AMT_ANNUITY': amt_annuity * 1e6,
            'DAYS_ID_PUBLISH': calculate_days_id_publish(change_date.strftime('%Y-%m-%d'), application_date.strftime('%Y-%m-%d')),
            'AMT_EARLY_SUM_SUM_ALL': sum(entry['D∆∞ n·ª£'] for entry in st.session_state.loan_entries if entry['Ng√†y tr·∫£ g·∫ßn nh·∫•t'] <= entry['Ng√†y tr·∫£ theo l·ªãch'] and entry['Ng√†y tr·∫£ g·∫ßn nh·∫•t'] <= entry['Ng√†y tr·∫£ theo l·ªãch']),
            'DAYS_CREDIT_ENDDATE_max': calculate_days_credit_enddate_max(credit_durations),
            'NAME_INCOME_TYPE': map_income_type(income_type),
            'FLAG_DOCUMENT_3': convert_document_3(flag_document_3),
            'FLAG_OWN_CAR': convert_car_ownership(flag_own_car),
            'DAYS_CREDIT_max': calculate_days_credit(credit_application_date),
            'NAME_PRODUCT_TYPE_street_sum': calculate_street_loan_count(df)
        }

        X_input = pd.DataFrame([features])  # change
        X_input = X_input.astype({"TERM": float, "AMT_ANNUITY": float})
        y_pred = model.predict(X_input)[0]
        scaled_score = score_scaling(y_pred)
        age = compute_age_exact(birth_date)
        MAX_AMT_BALANCE_AMT_CREDIT_LIMIT_ACTUAL_meanonid_L3M = calculate_max_utilization(df)
        credit_limit = suggest_credit_limit(
            scaled_score,
            age,
            gender,
            education,
            50e+6,
            MAX_AMT_BALANCE_AMT_CREDIT_LIMIT_ACTUAL_meanonid_L3M,
            low=430.59,
            med=481.02,
            high=519.62,
            cap=500 * 1e6
        )

        st.markdown(f"""
                <div>
                    <h2>üéØ ƒêi·ªÉm t√≠n d·ª•ng: <span>{round(scaled_score, 2)}</span></h2>
                    <h3 >üí∞ H·∫°n m·ª©c vay g·ª£i √Ω: <span>{credit_limit:,.0f} VNƒê</span></h3>
                </div>
                """, unsafe_allow_html=True)

        st.subheader("üß† Gi·∫£i th√≠ch m√¥ h√¨nh")
        st.write("Bi·ªÉu ƒë·ªì d∆∞·ªõi ƒë√¢y cho th·∫•y c√°c ƒë·∫∑c tr∆∞ng ·∫£nh h∆∞·ªüng nh·∫•t ƒë·∫øn ƒëi·ªÉm t√≠n d·ª•ng c·ªßa kh√°ch h√†ng:")

        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(X_input)

        fig, ax = plt.subplots(figsize=(4, 2))
        shap.plots.bar(shap.Explanation(values=shap_values,
                                        base_values=explainer.expected_value,
                                        data=X_input,
                                        feature_names=X_input.columns),
                       show=False)

        st.pyplot(fig)