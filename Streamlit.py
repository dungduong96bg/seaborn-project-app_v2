import streamlit as st
import numpy as np
import pandas as pd
from datetime import datetime, date
import shap
import lightgbm as lgb
import matplotlib.pyplot as plt

# Load m√¥ h√¨nh LightGBM
model = lgb.Booster(model_file='final_model.txt')

# ---------------------- H√†m x·ª≠ l√Ω ----------------------
def encode_education(level):
    mapping = {
        "Trung h·ªçc c∆° s·ªü": 0,
        "Trung h·ªçc ph·ªï th√¥ng / Trung c·∫•p": 1,
        "ƒê·∫°i h·ªçc ch∆∞a ho√†n th√†nh": 2,
        "ƒê·∫°i h·ªçc": 3,
        "Sau ƒë·∫°i h·ªçc": 4
    }
    return mapping.get(level, np.nan)

def encode_gender(gender):
    return 0 if gender == "N·ªØ" else 1 if gender == "Nam" else np.nan

def encode_days_employed(days):
    return days if days != 365243 else np.nan

def compute_debt_credit_ratio(debt, credit_sum):
    return debt / credit_sum if credit_sum != 0 else 0

def compute_days_birth(birth_date):
    return (birth_date - datetime.today().date()).days

def calculate_days_id_publish(change_date_str, application_date_str):
    change_date = datetime.strptime(change_date_str, '%Y-%m-%d')
    application_date = datetime.strptime(application_date_str, '%Y-%m-%d')
    return (application_date - change_date).days * -1

def calculate_days_credit(application_date):
    return (application_date - datetime.today().date()).days

def calculate_days_credit_enddate_max(credit_durations):
    return max(credit_durations) * -1 if credit_durations else np.nan

def map_income_type(income_type):
    mapping = {
        'L√†m c√¥ng ƒÉn l∆∞∆°ng': '0', 'Th·∫•t nghi·ªáp': '1', 'Sinh vi√™n': '2',
        'C√¥ng ch·ª©c nh√† n∆∞·ªõc': '3', 'Ng∆∞·ªùi ngh·ªâ h∆∞u': '4', 'Ngh·ªâ thai s·∫£n': '5',
        'ƒê·ªëi t√°c kinh doanh': '6', 'Ch·ªß doanh nghi·ªáp': '7'
    }
    return float(mapping.get(income_type, np.nan))

def convert_document_3(value):
    return 1 if value == 'C√≥' else 0

def convert_car_ownership(value):
    return 1 if value == 'C√≥' else 0


def score_scaling(p):
    pdo = 50
    base_score = 500

    factor = pdo / np.log(2)
    offset = base_score - (factor * np.log(50))
    score = offset + factor * np.log((1 - p) / p)
    return score

def suggest_credit_limit(score_100, max_amount=500_000_000):
    if score_100 >= 80:
        return 0.8 * max_amount
    elif score_100 >= 60:
        return 0.6 * max_amount
    elif score_100 >= 40:
        return 0.4 * max_amount
    else:
        return 0.2 * max_amount

# ---------------------- Giao di·ªán ng∆∞·ªùi d√πng ----------------------
st.set_page_config(page_title="Credit Scoring App", layout="centered")
st.title("üí≥ ·ª®ng d·ª•ng ch·∫•m ƒëi·ªÉm t√≠n d·ª•ng kh√°ch h√†ng")

#page_bg_img = '''
#<style>
#.stApp {
#background-image: url("https://images.unsplash.com/photo-1542281286-9e0a16bb7366");
#background-size: cover;
#background-repeat: no-repeat;
#background-attachment: fixed;
#}
#</style>
#'''

# Ch√®n CSS v√†o app
#st.markdown(page_bg_img, unsafe_allow_html=True)

# 1. Th√¥ng tin c√° nh√¢n
with st.expander("üë§ Th√¥ng tin c√° nh√¢n"):
    col1, col2 = st.columns([2, 2])
    with col1:
        Name = st.text_input("H·ªç t√™n KH:")
    with col2:
        cmnd = st.text_input("S·ªë CMND/CCCD")

    col3, col4 = st.columns([2, 2])
    with col3:
        gender = st.selectbox("Gi·ªõi t√≠nh", options=["Ch·ªçn", "N·ªØ", "Nam"], index=0)
    with col4:
        birth_date = st.date_input("Ng√†y sinh",min_value=date(1960, 1, 1),max_value=date(2010, 12, 31))

    col5, col6 = st.columns([2, 2])
    with col5:
        change_date_cmnd = st.date_input("Ng√†y c·∫•p CMND", value=date.today())
    with col6:
        education = st.selectbox("Tr√¨nh ƒë·ªô h·ªçc v·∫•n", options=["Ch·ªçn", "Trung h·ªçc c∆° s·ªü", "Trung h·ªçc ph·ªï th√¥ng / Trung c·∫•p", "ƒê·∫°i h·ªçc", "ƒê·∫°i h·ªçc ch∆∞a ho√†n th√†nh", "Sau ƒë·∫°i h·ªçc"])

    col7, col8 = st.columns([2, 2])
    with col7:
        days_employed = st.number_input("S·ªë ng√†y l√†m vi·ªác", min_value=-1000000, max_value=365243, step=1)
    with col8:
        income_type = st.selectbox("Lo·∫°i thu nh·∫≠p", ['Ch·ªçn', 'L√†m c√¥ng ƒÉn l∆∞∆°ng', 'Th·∫•t nghi·ªáp', 'Sinh vi√™n', 'C√¥ng ch·ª©c nh√† n∆∞·ªõc', 'Ng∆∞·ªùi ngh·ªâ h∆∞u', 'Ngh·ªâ thai s·∫£n', 'ƒê·ªëi t√°c kinh doanh', 'Ch·ªß doanh nghi·ªáp'])
# 5. Gi·∫•y t·ªù b·ªï sung
with st.expander("üìé H·ªì s∆° kho·∫£n vay"):
    checklist_options = [
        "ƒêƒÉng k√Ω k·∫øt h√¥n",
        "S·ªï h·ªô kh·∫©u / Gi·∫•y t·∫°m tr√∫",
        "Gi·∫•y x√°c nh·∫≠n t√¨nh tr·∫°ng h√¥n nh√¢n",
        "ƒêƒÉng k√Ω xe √¥ t√¥ / Gi·∫•y t·ªù xe",
        "Gi·∫•y ch·ª©ng nh·∫≠n quy·ªÅn s·ª≠ d·ª•ng ƒë·∫•t (S·ªï ƒë·ªè/s·ªï h·ªìng)",
        "H·ª£p ƒë·ªìng lao ƒë·ªông",
        "Sao k√™ l∆∞∆°ng 3 th√°ng g·∫ßn nh·∫•t",
        "Gi·∫•y ƒëƒÉng k√Ω kinh doanh",
        "B√°o c√°o thu·∫ø/Doanh thu",
        "H·ª£p ƒë·ªìng cho thu√™ t√†i s·∫£n",
        "Gi·∫•y t·ªù s·ªü h·ªØu t√†i s·∫£n cho thu√™",
        "H·ª£p ƒë·ªìng mua b√°n nh√†/xe",
        "D·ª± to√°n chi ph√≠ x√¢y d·ª±ng/s·ª≠a nh√†",
        "H√≥a ƒë∆°n h·ªçc ph√≠ / h·ª£p ƒë·ªìng du h·ªçc",
        "S·ªï ti·∫øt ki·ªám / t√†i s·∫£n ƒë·∫£m b·∫£o kh√°c",
        "·∫¢nh ch·ª•p t√†i s·∫£n ƒë·∫£m b·∫£o",
        "H·ª£p ƒë·ªìng t√≠n d·ª•ng c≈© (n·∫øu c√≥)",
        "Gi·∫•y x√°c nh·∫≠n thu nh·∫≠p b·ªï sung",
        "H·ª£p ƒë·ªìng th·∫ø ch·∫•p t√†i s·∫£n",
        "Kh√°c (t√†i li·ªáu b·ªï sung)"
    ]

    # Chia th√†nh 2 h√†ng
    half = len(checklist_options) // 2
    row1 = checklist_options[:half]
    row2 = checklist_options[half:]

    document_flags = {}
    uploaded_files = {}

    def render_row(docs):
        cols = st.columns(2)
        for idx, doc in enumerate(docs):
            with cols[idx % 2]:
                checked = st.checkbox(doc, key=f"check_{doc}")
                document_flags[doc] = int(checked)

                if checked:
                    uploaded_file = st.file_uploader(
                        f"T·∫£i l√™n file cho: {doc}",
                        key=f"upload_{doc}",
                        type=["pdf", "jpg", "png", "jpeg", "docx"]
                    )
                    uploaded_files[doc] = uploaded_file
                else:
                    uploaded_files[doc] = None

    #st.markdown("### üìÑ H√†ng 1:")
    render_row(row1)

    #st.markdown("### üìÑ H√†ng 2:")
    render_row(row2)

    # V√≠ d·ª• flag
    flag_document_3 = document_flags.get("S·ªï h·ªô kh·∫©u / Gi·∫•y t·∫°m tr√∫", 0)
    flag_own_car = document_flags.get("ƒêƒÉng k√Ω xe √¥ t√¥ / Gi·∫•y t·ªù xe", 0)

# 3. Th√¥ng tin t√≠n d·ª•ng
with st.expander("üí∞ Th√¥ng tin t√≠n d·ª•ng"):
    col1, col2 = st.columns([2, 2])
    with col1:
        external_1 = st.number_input("ƒêi·ªÉm XHTD KH t·∫°i CIC", min_value=0.0, format="%.5f")
    with col2:
        external_2 = st.number_input("ƒêi·ªÉm XHTD KH t·∫°i PCB", min_value=0.0, format="%.5f")

    col3, col4 = st.columns([2, 2])
    with col3:
        external_3 = st.number_input("ƒêi·ªÉm XHTD KH t·∫°i Viettel", min_value=0.0, format="%.5f")
    with col4:
        amt_credit = st.number_input("H·∫°n m·ª©c vay hi·ªán t·∫°i (tri·ªáu VNƒê)", min_value=0.0, step=0.1)

    col5, col6 = st.columns([2, 2])
    with col5:
        amt_annuity = st.number_input("Kho·∫£n tr·∫£ g√≥p h√†ng th√°ng (tri·ªáu VNƒê)", min_value=0.0, step=0.1)
    with col6:
        amt_debt = st.number_input("T·ªïng d∆∞ n·ª£ hi·ªán t·∫°i (tri·ªáu VNƒê)", min_value=0.0, step=0.1)

    col7, col8 = st.columns([2, 2])
    with col7:
        amt_credit_sum = st.number_input("T·ªïng h·∫°n m·ª©c t√≠n d·ª•ng ƒë∆∞·ª£c c·∫•p (tri·ªáu VNƒê)", min_value=0.0, step=0.1)
    with col8:
        MAX_AMT_BALANCE_AMT_CREDIT_LIMIT_ACTUAL_meanonid_L3M = st.number_input("T·ª∑ l·ªá s·ª≠ d·ª•ng h·∫°n m·ª©c 3 th√°ng g·∫ßn nh·∫•t", min_value=0.0, max_value=1.0)

# 4. L·ªãch s·ª≠ t√≠n d·ª•ng (danh s√°ch kho·∫£n vay)
#st.markdown("### üóì L·ªãch s·ª≠ t√≠n d·ª•ng (c√°c kho·∫£n vay c√≤n hi·ªáu l·ª±c)")
with st.expander("üìÑ Th√¥ng tin c√°c kho·∫£n vay"):
    if "loan_entries" not in st.session_state:
        st.session_state.loan_entries = []

    col1, col2 = st.columns([2, 1])
    with col1:
        new_loan_id = st.text_input("üîπ M√£ kho·∫£n vay", key="loan_id")
    with col2:
        new_days_remaining = st.number_input("üî∏ S·ªë ng√†y c√≤n l·∫°i (ng√†y)", min_value=1, max_value=5000, step=1, key="days_remaining")

    if st.button("‚ûï Th√™m kho·∫£n vay"):
        if new_loan_id:
            st.session_state.loan_entries.append({
                "M√£ kho·∫£n vay": new_loan_id,
                "S·ªë ng√†y c√≤n l·∫°i": new_days_remaining
            })

    if st.session_state.loan_entries:
        st.dataframe(pd.DataFrame(st.session_state.loan_entries))

# 6. Submit & x·ª≠ l√Ω m√¥ h√¨nh
submit = st.button("üöÄ Ch·∫•m ƒëi·ªÉm t√≠n d·ª•ng")
if submit:
    if income_type == 'Ch·ªçn':
        st.warning("Vui l√≤ng ch·ªçn lo·∫°i thu nh·∫≠p")
    else:
        credit_durations = [entry["S·ªë ng√†y c√≤n l·∫°i"] for entry in st.session_state.loan_entries]

        features = {
            'AVG_EXT_SOURCE': np.mean([external_1, external_2, external_3]),
            'EXT_SOURCE_1': external_1,
            'EXT_SOURCE_2': external_2,
            'EXT_SOURCE_3': external_3,
            'TERM': round((amt_credit * 1e6) / (amt_annuity * 1e6)) if amt_annuity else np.nan,
            'DAYS_BIRTH': compute_days_birth(birth_date),
            'DEBT_CREDIT_RATIO': compute_debt_credit_ratio(amt_debt, amt_credit_sum),
            'CODE_GENDER': encode_gender(gender) if gender != "Ch·ªçn" else np.nan,
            'NAME_EDUCATION_TYPE': encode_education(education if education != "Ch·ªçn" else None),
            'DAYS_EMPLOYED': encode_days_employed(days_employed),
            'MAX_AMT_BALANCE_AMT_CREDIT_LIMIT_ACTUAL_meanonid_L3M': MAX_AMT_BALANCE_AMT_CREDIT_LIMIT_ACTUAL_meanonid_L3M,
            'AMT_ANNUITY': amt_annuity * 1e6,
            'DAYS_ID_PUBLISH': calculate_days_id_publish(change_date.strftime('%Y-%m-%d'), application_date.strftime('%Y-%m-%d')),
            'AMT_EARLY_SUM_SUM_ALL': 0,
            'DAYS_CREDIT_ENDDATE_max': calculate_days_credit_enddate_max(credit_durations),
            'NAME_INCOME_TYPE': map_income_type(income_type),
            'FLAG_DOCUMENT_3': convert_document_3(flag_document_3),
            'FLAG_OWN_CAR': convert_car_ownership(flag_own_car),
            'DAYS_CREDIT_max': calculate_days_credit(credit_application_date),
            'NAME_PRODUCT_TYPE_street_sum': 0
        }

        X_input = pd.DataFrame([features])
        X_input = X_input.astype({"TERM": float, "AMT_ANNUITY": float})
        score = model.predict(X_input)[0]
        scaled_score = round(score_scaling(score), 2)
        credit_limit = suggest_credit_limit(scaled_score)

        st.markdown(f"""
        <div>
            <h2>üéØ ƒêi·ªÉm t√≠n d·ª•ng: <span>{scaled_score}/100</span></h2>
            <h3 >üí∞ H·∫°n m·ª©c vay g·ª£i √Ω: <span>{credit_limit:,.0f} VNƒê</span></h3>
        </div>
        """, unsafe_allow_html=True)

        st.subheader("üß† Gi·∫£i th√≠ch m√¥ h√¨nh")
        st.write("Bi·ªÉu ƒë·ªì d∆∞·ªõi ƒë√¢y cho th·∫•y c√°c ƒë·∫∑c tr∆∞ng ·∫£nh h∆∞·ªüng nh·∫•t ƒë·∫øn ƒëi·ªÉm t√≠n d·ª•ng c·ªßa kh√°ch h√†ng:")

        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(X_input)

        fig, ax = plt.subplots(figsize=(10, 6))
        shap.plots.bar(shap.Explanation(values=shap_values,
                                        base_values=explainer.expected_value,
                                        data=X_input,
                                        feature_names=X_input.columns),
                       show=False)
        st.pyplot(fig)